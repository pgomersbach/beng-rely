#platform=x86, AMD64, or Intel EM64T
#version=DEVEL
# Network information
network  --bootproto=static --device=eth0 --gateway=172.19.53.254 --ip=172.19.53.35 --nameserver=172.18.99.210 --netmask=255.255.255.0 --onboot=on --hostname puppet.beeldengeluid.nl
# Firewall configuration
firewall --disabled
# Install OS instead of upgrade
install
# Use CDROM installation media
#cdrom
# use http installation media
url --url=http://sjefkeschelm.beeldengeluid.nl/cdrom_7.2
# use http installation media Centos media
#url --url=http://sjefkeschelm.beeldengeluid.nl/Centos/cdrom_7.2/
# Root password
rootpw --iscrypted $1$M52kCjTk$vRkVC78UxaURJriDf0z9a.
#standaard keyusers define in puppet
# System authorization information
auth  --useshadow  --passalgo=sha512
# Use text mode install
text
# System keyboard
keyboard us
# System language
lang en_US
# SELinux configuration
selinux --disabled
# Do not configure the X Window System
skipx
# Installation logging level
logging --level=info
# Reboot after installation?
reboot
# System timezone
timezone  Europe/Amsterdam --ntpservers=172.18.99.210,172.18.99.211
#service auto start
services --enabled=ntpd,rc-local
# System bootloader configuration
bootloader --location=mbr --append="rhgb quiet crashkernel=auto"
# Clear the Master Boot Record
zerombr
# Partition clearing information
clearpart --all --initlabel 
# Disk partitioning information
part /boot --asprimary --fstype="ext4" --size=500
part swap --fstype="swap" --recommended
part /home --fstype="ext4" --size=10000
part /opt --asprimary --fstype="ext4" --grow --size=1
part / --asprimary --fstype="ext4" --size=50000

%post
#puppet_source=https://code.google.com/p/beng-rely/
#puppet_source=https://github.com/relybv/beng-rely.git
#role=site

cat > /etc/yum.repos.d/RHEL_dvd.repo << EOF
[RHEL_7.2_x86_64]
name=rhel_7.2_x86_64
baseurl=http://sjefkeschelm.beeldengeluid.nl/cdrom_7.2
enabled=1
gpgcheck=0
EOF

#echo "Installing puppet repo" > /root/kickstart.log
#yum clean all
#rpm -ivh https://yum.puppetlabs.com/puppetlabs-release-pc1-el-7.noarch.rpm
echo "Installing Epel repo" >> /root/kickstart.log
rpm -ivh https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
echo "Installing nagios-plugins" >> /root/kickstart.log
yum -y install nagios-plugins-all >> /root/kickstart.log
echo "Installing nrpe" >> /root/kickstart.log
yum -y install nrpe >> /root/kickstart.log

#echo "Installing git" >> /root/kickstart.log
#yum -y install git >> /root/kickstart.log
#if [ -d "/etc/puppet.orig" ]; then
#  rm -rf /etc/puppet.orig
#fi
#if [ -d "/etc/puppet" ]; then
#  mv /etc/puppet /etc/puppet.orig
#fi

#echo "Cloning $puppet_source" >> /root/kickstart.log
#env GIT_SSL_NO_VERIFY=true git clone $puppet_source /etc/puppet
#while [ $? -ne 0 ]; do
#  echo "Git failed, trying.."
#  if [ -d "/etc/puppet" ]; then
#    rm -rf /etc/puppet
#  fi
#  env GIT_SSL_NO_VERIFY=true git clone $puppet_source /etc/puppet
#done

echo "Cloning and install" >> /root/kickstart.log
cat > /etc/rc.d/rc.local << EOF
#!/bin/bash
if [ ! -d  /root/puppetlog/ ];
  then
  mkdir -p /root/puppetlog/
fi
# start real work here
exec 2> /root/puppetlog/rc.local.log      # send stderr from rc.local to a log file
exec 1>&2                      # send stdout to the same log file
echo "rc.local started"        # show start of execution
set -x                         # tell sh to display commands before execution
if [ ! -f "/root/puppetlog/logcheckfile" ];
  then
  curl https://raw.githubusercontent.com/relybv/beng-role_deployserver/master/files/bootme.sh -o bootme.sh; bash bootme.sh
  fi
  if [ ! -d  /root/puppetlog/ ];
    then
    mkdir -p /root/puppetlog/
  fi
  touch /root/puppetlog/logcheckfile
echo "rc.local completed"
exit 0
EOF
echo  "Change rc.local status Cloning and install" >> /root/kickstart.log
chmod u+x /etc/rc.d/rc.local

#echo "Installing puppet-agent" >> /root/kickstart.log
#yum install -y puppet-agent.x86_64
#yum install -y puppet
#/opt/puppetlabs/bin/puppet resource service puppet ensure=running enable=true 
#echo "preparing puppet-agent SSL" >> /root/kickstart.log
#rm -rf /etc/puppetlabs/puppet/ssl/
# puppet agent -t  >> /root/kickstart.log
#echo "adding port 8140 for   puppet-agent" >> /root/kickstart.log
#firewall-offline-cmd --direct --add-rule ipv4 filter INPUT 0 -p tcp -m state --state NEW -m tcp --dport 8140 -j ACCEPT >> /root/kickstart.log

#echo "updating Puppet.conf   puppet-agent" >> /root/kickstart.log

#cat > /etc/puppetlabs/puppet/puppet.conf << EOF

#[agent]
#certname = puppet.beeldengeluid.nl
#server = puppet.beeldengeluid.nl
#environment = production
#runinterval = 1h
#EOF

# standaard firewall rules
# webserver firewall rules
if [ -d "/etc/nrpe.d" ]; then
# nrpe firewall rule and configs
echo "Install nrpe and Nagios files">>/root/kickstart.log
firewall-offline-cmd --direct --add-rule ipv4 filter INPUT 0 -p tcp -m state --state NEW -m tcp --dport 5666 -j ACCEPT >> /root/kickstart.log
wget http://sjefkeschelm.beeldengeluid.nl/beng-rely/files/ks_7/nrpe.cfg -O /etc/nagios/nrpe.cfg
wget http://sjefkeschelm.beeldengeluid.nl/beng-rely/files/ks_7/local_commands.cfg -O /etc/nrpe.d/local_commands.cfg
wget http://sjefkeschelm.beeldengeluid.nl/beng-rely/files/ks_7/utils.sh -O /usr/lib64/nagios/plugins/utils.sh
wget http://sjefkeschelm.beeldengeluid.nl/beng-rely/files/ks_7/check_memory.sh -O /usr/lib64/nagios/plugins/check_memory.sh
wget http://sjefkeschelm.beeldengeluid.nl/beng-rely/files/ks_7/check_uptime.sh -O /usr/lib64/nagios/plugins/check_uptime.sh
echo "change config en check files">>/root/kickstart.log
chmod 755 /usr/lib64/nagios/plugins/utils.sh
chmod 755 /usr/lib64/nagios/plugins/check_memory.sh
chmod 755  /usr/lib64/nagios/plugins/check_uptime.sh
fi


#if [ -f /etc/puppet/manifests/$role.pp  ]; then
#/opt/puppetlabs/puppet/bin/puppet apply /etc/puppet/manifests/$role.pp >> /root/kickstart.log
#else
#  echo "/etc/puppet/manifests/$role.pp was not found!" >> /root/kickstart.log
#fi
%end

%packages
@base
@console-internet
@development
@network-file-system-client
@network-tools
@perl-runtime
@ruby-runtime
net-snmp
open-vm-tools
ntp
git

%end
